//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

#[deprecated]
pub const DOM_MODIFICATION: c_uint = 1;
#[deprecated]
pub const DOM_ADDITION: c_uint = 2;
#[deprecated]
pub const DOM_REMOVAL: c_uint = 3;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    #[deprecated]
    pub struct DOMMutationEvent;

    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl ClassType for DOMMutationEvent {
        #[inherits(DOMObject, WebScriptObject, NSObject)]
        type Super = DOMEvent;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(
    feature = "DOMEvent",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSCopying for DOMMutationEvent {}

#[cfg(all(
    feature = "DOMEvent",
    feature = "DOMObject",
    feature = "WebScriptObject"
))]
unsafe impl NSObjectProtocol for DOMMutationEvent {}

extern_methods!(
    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMMutationEvent {
        #[cfg(feature = "DOMNode")]
        #[deprecated]
        #[method_id(@__retain_semantics Other relatedNode)]
        pub unsafe fn relatedNode(&self) -> Option<Retained<DOMNode>>;

        #[deprecated]
        #[method_id(@__retain_semantics Other prevValue)]
        pub unsafe fn prevValue(&self) -> Retained<NSString>;

        #[deprecated]
        #[method_id(@__retain_semantics Other attrName)]
        pub unsafe fn attrName(&self) -> Retained<NSString>;

        #[deprecated]
        #[method(attrChange)]
        pub unsafe fn attrChange(&self) -> c_ushort;

        #[cfg(feature = "DOMNode")]
        #[method(initMutationEvent:canBubble:cancelable:relatedNode:prevValue:newValue:attrName:attrChange:)]
        pub unsafe fn initMutationEvent_canBubble_cancelable_relatedNode_prevValue_newValue_attrName_attrChange(
            &self,
            r#type: Option<&NSString>,
            can_bubble: bool,
            cancelable: bool,
            related_node: Option<&DOMNode>,
            prev_value: Option<&NSString>,
            new_value: Option<&NSString>,
            attr_name: Option<&NSString>,
            attr_change: c_ushort,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `DOMObject`
    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMMutationEvent {
        #[deprecated]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMMutationEvent {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// DOMMutationEventDeprecated
    #[cfg(all(
        feature = "DOMEvent",
        feature = "DOMObject",
        feature = "WebScriptObject"
    ))]
    unsafe impl DOMMutationEvent {
        #[cfg(feature = "DOMNode")]
        #[deprecated]
        #[method(initMutationEvent::::::::)]
        pub unsafe fn initMutationEvent(
            &self,
            r#type: Option<&NSString>,
            can_bubble: bool,
            cancelable: bool,
            related_node: Option<&DOMNode>,
            prev_value: Option<&NSString>,
            new_value: Option<&NSString>,
            attr_name: Option<&NSString>,
            attr_change: c_ushort,
        );
    }
);
